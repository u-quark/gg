version: 2

jobs:
  build:
    machine:
        enabled: true
    steps:
      - checkout

      - run:
          name: Install Nix
          command: |
            sudo mkdir -p /nix
            sudo chown circleci /nix
            # Retry installing nix due to nondeterministic error
            #   Fatal error: glibc detected an invalid stdio handle
            # See:
            #   https://github.com/nh2/static-haskell-nix/pull/27#issuecomment-502652181
            #   https://github.com/NixOS/nix/issues/2733
            (for i in {1..5}; do bash <(curl https://nixos.org/nix/install) && exit 0; done; exit 1)
            echo '. /home/circleci/.nix-profile/etc/profile.d/nix.sh' >> $BASH_ENV
            sudo mkdir -p /etc/nix
            # Enable sandbox
            echo "build-use-sandbox = true" | sudo tee -a /etc/nix/nix.conf
            # Setup nix cache
            echo "substituters = https://cache.nixos.org" | sudo tee -a /etc/nix/nix.conf
            echo "trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" | sudo tee -a /etc/nix/nix.conf
            # Disable signature checks because static-haskell-nix uploads aren't signed yet.
            echo "require-sigs = false" | sudo tee -a /etc/nix/nix.conf
      - run:
          name: Install Cachix
          command: |
            nix-env -iA cachix -f https://cachix.org/api/v1/install
            # Enable cachix caches
            cachix use static-haskell-nix
            cachix use gg

      - run:
          name: Build gg
          command: |
            NIX_PATH='' nix-build --show-trace
      - store_artifacts:
          path: result/bin/
          destination: bin
      - persist_to_workspace:
          root: ./result/bin
          paths: [ 'gg' ]

      - run:
          name: Upload to Cachix
          command: |
            (find /nix/store -maxdepth 1 -mindepth 1 -and -not -name '*.lock' -and -not -name '.links' | cachix push gg) || true

  publish-github-nightly:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Nightly Release on GitHub"
          command: |
            VERSION='nightly'
            ghr \
                -t ${GITHUB_TOKEN} \
                -u ${CIRCLE_PROJECT_USERNAME} \
                -r ${CIRCLE_PROJECT_REPONAME} \
                -c ${CIRCLE_SHA1} \
                -n 'Latest binary build' \
                -b 'Nightly build of the latest code in master. Download the static binary [gg](https://github.com/u-quark/gg/releases/download/nightly/gg) and `chmod +x` it.' \
                -delete -replace \
                -prerelease \
                ${VERSION} ./artifacts/gg

workflows:
  version: 2
  build:
    jobs:
      - build
      - publish-github-nightly:
          requires:
            - build
          filters:
            branches:
              only:
                - master

